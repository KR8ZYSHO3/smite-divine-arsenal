#!/usr/bin/env python3
"""
Divine Arsenal System Status Checker
Checks the health and structure of the divine-arsenal system after cleanup
"""

import sys
from pathlib import Path


def check_system_status():
    """Check the divine_arsenal system status."""

    print("üîç DIVINE ARSENAL SYSTEM STATUS CHECK")
    print("=" * 50)

    divine_path = Path("divine_arsenal")
    backend_path = divine_path / "backend"

    if not divine_path.exists():
        print("‚ùå divine_arsenal directory not found!")
        return False

    if not backend_path.exists():
        print("‚ùå backend directory not found!")
        return False

    # Check essential files
    essential_files = {
        "app.py": "Main Flask application",
        "database.py": "Database layer",
        "advanced_build_optimizer.py": "Advanced build optimizer",
        "build_explainer.py": "Build explanation system",
        "statistical_analyzer.py": "Statistical analysis",
        "player_performance_integrator.py": "Player performance system",
        "god_data.py": "God data access",
        "item_data.py": "Item data access",
        "divine_arsenal.db": "Main database",
    }

    print("‚úÖ ESSENTIAL FILES CHECK:")
    missing_files = []
    total_size = 0

    for file_name, description in essential_files.items():
        file_path = backend_path / file_name
        if file_path.exists():
            size = file_path.stat().st_size / 1024  # KB
            total_size += size
            print(f"  ‚úÖ {file_name:<35} ({size:6.1f} KB) - {description}")
        else:
            print(f"  ‚ùå {file_name:<35} (MISSING) - {description}")
            missing_files.append(file_name)

    # Check directories
    essential_dirs = {"scrapers": "Data scraping modules", "templates": "Web interface templates"}

    print(f"\n‚úÖ ESSENTIAL DIRECTORIES CHECK:")
    missing_dirs = []

    for dir_name, description in essential_dirs.items():
        dir_path = backend_path / dir_name
        if dir_path.exists():
            file_count = len(list(dir_path.glob("*")))
            print(f"  ‚úÖ {dir_name:<15} ({file_count} files) - {description}")
        else:
            print(f"  ‚ùå {dir_name:<15} (MISSING) - {description}")
            missing_dirs.append(dir_name)

    # Check data directory
    data_path = divine_path / "data"
    if data_path.exists():
        gods_file = data_path / "gods.json"
        items_file = data_path / "items.json"
        gods_exists = gods_file.exists()
        items_exists = items_file.exists()
        print(f"\n‚úÖ DATA FILES CHECK:")
        print(f"  {'‚úÖ' if gods_exists else '‚ùå'} gods.json - Gods data")
        print(f"  {'‚úÖ' if items_exists else '‚ùå'} items.json - Items data")
    else:
        print(f"\n‚ùå DATA DIRECTORY MISSING")

    # System summary
    print(f"\nüìä SYSTEM SUMMARY:")
    print(f"  ‚Ä¢ Total essential files size: {total_size:.1f} KB")
    print(f"  ‚Ä¢ Missing files: {len(missing_files)}")
    print(f"  ‚Ä¢ Missing directories: {len(missing_dirs)}")

    if missing_files or missing_dirs:
        print(f"\n‚ö†Ô∏è  ISSUES FOUND:")
        for file in missing_files:
            print(f"    ‚Ä¢ Missing file: {file}")
        for dir in missing_dirs:
            print(f"    ‚Ä¢ Missing directory: {dir}")
        return False
    else:
        print(f"\nüéâ SYSTEM HEALTHY!")
        print(f"‚úÖ All essential components present")
        print(f"üöÄ Ready to launch with: python launch_divine_arsenal.py")
        return True


def check_import_health():
    """Check for potential import issues."""
    print(f"\nüîç IMPORT HEALTH CHECK:")

    backend_path = Path("divine_arsenal/backend")

    # Check if scrapers has __init__.py
    scrapers_init = backend_path / "scrapers" / "__init__.py"
    if not scrapers_init.exists():
        print(f"  ‚ö†Ô∏è  scrapers/__init__.py missing - may cause import errors")
        return False

    print(f"  ‚úÖ Import structure looks good")
    return True


def show_clean_structure():
    """Show the expected clean structure."""
    print(f"\nüéØ EXPECTED CLEAN STRUCTURE:")
    print(f"divine_arsenal/")
    print(f"‚îú‚îÄ‚îÄ backend/")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ app.py                          # Main Flask app")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ database.py                     # Database layer")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ advanced_build_optimizer.py     # Advanced optimizer")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ build_explainer.py              # Build explanations")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ statistical_analyzer.py         # Statistics")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ player_performance_integrator.py # Player system")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ multi_mode_optimizer.py         # Multi-mode support")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ god_data.py / item_data.py      # Data access")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ scrapers/                       # Data scrapers")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ templates/                      # Web interface")
    print(f"‚îÇ   ‚îî‚îÄ‚îÄ divine_arsenal.db               # Main database")
    print(f"‚îú‚îÄ‚îÄ data/")
    print(f"‚îÇ   ‚îú‚îÄ‚îÄ gods.json                       # Gods data")
    print(f"‚îÇ   ‚îî‚îÄ‚îÄ items.json                      # Items data")
    print(f"‚îú‚îÄ‚îÄ launch_enhanced.py                  # System launcher")
    print(f"‚îî‚îÄ‚îÄ docs/                               # Documentation")


if __name__ == "__main__":
    healthy = check_system_status()
    imports_ok = check_import_health()
    show_clean_structure()

    if healthy and imports_ok:
        print(f"\nüéâ SYSTEM STATUS: EXCELLENT")
        print(f"üí° Your divine_arsenal system is clean and ready!")
    else:
        print(f"\n‚ö†Ô∏è  SYSTEM STATUS: NEEDS ATTENTION")
        print(f"üîß Some issues found that may need fixing")
